
package com.example.accessingdataneo4j;

import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.data.neo4j.core.schema.Id;
import org.springframework.data.neo4j.core.schema.Node;
// import org.springframework.data.neo4j.core.schema.Property;
import org.springframework.data.neo4j.core.schema.Relationship;
// import org.apache.tomcat.util.json.JSONParser;
// import org.springframework.boot.json.JsonParser;
import org.springframework.data.neo4j.core.schema.GeneratedValue;

@Node
public class Company {

	@Id @GeneratedValue private Long id;

	private String name;

	private Company() {
		// Empty constructor required as of Neo4j API 2.0.5
	};

	public Company(String name) {
		this.name = name;
		// this.data = data;
	}

	/**
	 * Neo4j doesn't REALLY have bi-directional relationships. It just means when querying
	 * to ignore the direction of the relationship.
	 * https://dzone.com/articles/modelling-data-neo4j
	 */
	@Relationship(type = "Create")
	public Set<Company> created;

	public void worksWith(Company company) {
		if (created == null) {
			created = new HashSet<>();
		}
		created.add(company);
	}

	public String toString() {

		return this.name + " created "
			+ Optional.ofNullable(this.created).orElse(
					Collections.emptySet()).stream()
						.map(Company::getName)
						.collect(Collectors.toList());
	}

	public String getName() {
		return name;
	}	
	
	public void setName(String name) {
		this.name = name;
	}

}
